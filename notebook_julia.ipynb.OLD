{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "f307ec7d",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2047f936",
   "metadata": {},
   "outputs": [],
   "source": [
    "import HiGHS\n",
    "using DataFrames: DataFrame\n",
    "using JuMP\n",
    "\n",
    "axis(a) = axes(a, 1)\n",
    "base_power = 1000"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ed089f50",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7a99ec74",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Network data\n",
    "nodes = [\n",
    "    (id=1, load=0, x=-1, y=1),\n",
    "    (id=2, load=0, x=1, y=1),\n",
    "    (id=3, load=150, x=0, y=0),\n",
    "] |> DataFrame"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "125fbf6c",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bf08ca47",
   "metadata": {},
   "outputs": [],
   "source": [
    "generators = [\n",
    "    (id=1, node_id=1, capacity=200, cost=10),\n",
    "    (id=2, node_id=2, capacity=200, cost=12),\n",
    "    (id=3, node_id=1, capacity=200, cost=14),\n",
    "] |> DataFrame"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c86c504d",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0c8239c4",
   "metadata": {},
   "outputs": [],
   "source": [
    "lines = [\n",
    "    (id=1, from_node_id=1, to_node_id=2, susceptance=0.25, capacity=30),\n",
    "    (id=2, from_node_id=1, to_node_id=3, susceptance=0.25, capacity=300),\n",
    "    (id=3, from_node_id=2, to_node_id=3, susceptance=0.25, capacity=300),\n",
    "] |> DataFrame"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "14fc761f",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5eb5e7b5",
   "metadata": {},
   "outputs": [],
   "source": [
    "offers = [\n",
    "    (id=1, generator_id=1, max_quantity=200, price=10),\n",
    "    (id=2, generator_id=2, max_quantity=200, price=12),\n",
    "    (id=3, generator_id=3, max_quantity=200, price=14),\n",
    "] |> DataFrame"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c19f0cf0",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fb68c2d3",
   "metadata": {},
   "outputs": [],
   "source": [
    "node_line = [\n",
    "    if node.id == line.from_node_id\n",
    "        -1\n",
    "    elseif node.id == line.to_node_id\n",
    "        +1\n",
    "    else\n",
    "        0\n",
    "    end\n",
    "    for node = eachrow(nodes), line = eachrow(lines)\n",
    "]\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f8574cb2",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "459b37e2",
   "metadata": {},
   "outputs": [],
   "source": [
    "node_generator_offer = [\n",
    "    if node.id == generator.node_id && generator.id == offer.generator_id\n",
    "        1\n",
    "    else\n",
    "        0\n",
    "    end\n",
    "    for node = eachrow(nodes), generator = eachrow(generators), offer = eachrow(offers)\n",
    "]\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "38c46b7b",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2a741d17",
   "metadata": {},
   "outputs": [],
   "source": [
    "model = Model(HiGHS.Optimizer)\n",
    "\n",
    "@variable(model, p[o=axis(offers)])\n",
    "@variable(model, f[ℓ=axis(lines)])\n",
    "@variable(model, θ[n=axis(nodes)])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d695ec34",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3b3ab81c",
   "metadata": {},
   "outputs": [],
   "source": [
    "@objective(model, Min, sum(offers[:, :price] .* p))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "34c63ebe",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e607cc94",
   "metadata": {},
   "outputs": [],
   "source": [
    "@constraint(\n",
    "    model,\n",
    "    balance[n=axis(nodes)],\n",
    "    sum(\n",
    "        node_generator_offer[n, g, o] * p[o]\n",
    "        for g = axis(generators)\n",
    "        for o = axis(offers)\n",
    "    ) +\n",
    "    sum(node_line[n, ℓ] * f[ℓ] for ℓ = axis(lines))\n",
    "    ==\n",
    "    nodes[n, :load]\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e2ddbf5",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cd26e8d1",
   "metadata": {},
   "outputs": [],
   "source": [
    "@constraint(\n",
    "    model,\n",
    "    flow[ℓ=axis(lines)],\n",
    "    sum(base_power * node_line[n, ℓ] * θ[n] * lines[ℓ, :susceptance] for n = axis(nodes)) == f[ℓ]\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8273a76b",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9b2ea510",
   "metadata": {},
   "outputs": [],
   "source": [
    "@constraint(model, offer_bounds[o=axis(offers)], 0 .≤ p[o] .≤ offers[o, :max_quantity])\n",
    "@constraint(model, flow_bounds[ℓ=axis(lines)], -lines[ℓ, :capacity] ≤ f[ℓ] ≤ +lines[ℓ, :capacity])\n",
    "@constraint(model, angle_bounds[n=axis(nodes)], -π ≤ θ[n] ≤ +π)\n",
    "@constraint(model, reference_angle, θ[1] == 0)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dbbae4af",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dbe0244f",
   "metadata": {},
   "outputs": [],
   "source": [
    "model\n",
    "\n",
    "optimize!(model)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "21edac97",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "93336af1",
   "metadata": {},
   "outputs": [],
   "source": [
    "@show p_star = value.(p)\n",
    "@show f_star = value.(f)\n",
    "@show θ_star_deg = value.(θ) .* 180 / π\n",
    "@show prices = dual.(balance)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1952d8c9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# notebook cell 1\n",
    "using Graphs, Plots, GraphRecipes\n",
    "gr()\n",
    "\n",
    "g = Graph(4)\n",
    "add_edge!(g, 1, 2)\n",
    "add_edge!(g, 2, 3)\n",
    "add_edge!(g, 3, 4)\n",
    "add_edge!(g, 1, 4)\n",
    "\n",
    "graphplot(g;\n",
    "    names=1:nv(g),\n",
    "    edgelabel=[\"A\", \"B\", \"C\", \"D\"],\n",
    "    method=:spring,\n",
    "    nodeshape=:circle,\n",
    "    nodesize=0.3,\n",
    "    nodecolor=:cornflowerblue,\n",
    "    fontsize=12)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Julia 1.11.4",
   "language": "julia",
   "name": "julia-1.11"
  },
  "language_info": {
   "file_extension": ".jl",
   "mimetype": "application/julia",
   "name": "julia",
   "version": "1.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
